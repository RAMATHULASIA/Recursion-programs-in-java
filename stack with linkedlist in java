//Node class
class Node{
    int data;
    Node next;
    Node(int data){
        this.data=data;
        this.next=null;
    }
}
//stack class using linkedList
class stack{
    private Node top;
    public stack(){
        this.top=null;
    }
    //pushoperation
    public void push(int data){
        Node newNode=new Node(data);
        newNode.next=top;
        top=newNode;
    }
    //popoperation
    public int pop(){
        if(isEmpty()){
            System.out.println("Stack underflow! cannot pop from a empty stack");
            return -1;
        }
        int poppedData=top.data;
        top=top.next;
        return poppedData;
    }
    //peekoperation
    public int peek(){
        if(isEmpty()){
            System.out.println("Stack is Empty!");
            return -1;
        }
        return top.data;
    }
    //check if stack is Empty
    public boolean isEmpty(){
        return top==null;
    }
    //dispaly stack elements
    public void display(){
        if(isEmpty()){
            System.out.println("Stack is Empty!");
            return;
        }
        Node temp=top;
        while(temp!=null){
            System.out.println(temp.data+"->");
            temp=temp.next;
        }
        System.out.println("None");
    }
}

//usage
public class Main{
    public static void main(String[] args){
        stack stack=new stack();
        stack.push(10);
        stack.push(20);
        stack.push(30);
        stack.display();
        System.out.println("Popped:"+stack.pop());
        System.out.println("Top element:"+stack.peek());
        stack.display();
    }
}
